name: Build
permissions: write-all
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Tag version to release'
        required: false
  push:
    tags:
      - v*
    paths-ignore:
      - 'README.md'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/workflows/issues.yml'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            arch: x64
            format: 7z
          - os: windows-latest
            arch: x64
            format: nsis
          - os: windows-latest
            arch: arm64
            format: 7z
          - os: windows-latest
            arch: arm64
            format: nsis

          - os: ubuntu-latest
            arch: x64
            format: deb
          - os: ubuntu-latest
            arch: x64
            format: rpm
          - os: ubuntu-latest
            arch: x64
            format: pacman
          - os: ubuntu-latest
            arch: arm64
            format: deb
          - os: ubuntu-latest
            arch: arm64
            format: rpm
          - os: ubuntu-latest
            arch: arm64
            format: pacman
          - os: ubuntu-latest
            arch: loong64
            format: deb
          - os: ubuntu-latest
            arch: loong64
            format: rpm
          - os: ubuntu-latest
            arch: loong64
            format: pacman

          - os: macos-latest
            arch: x64
          - os: macos-latest
            arch: arm64

    name: Build ${{ matrix.os }}-${{ matrix.arch }}${{ matrix.format && '-' || '' }}${{ matrix.format || '' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        run: npm install -g pnpm

      - name: Determine and Update Version
        shell: bash
        run: |
          GIT_COMMIT_HASH=$(git rev-parse --short HEAD)
          VERSION=$(jq -r '.version' package.json)

          if [ "${{ github.event.inputs.version }}" == "" ]; then
            BASE_VERSION=$(echo $VERSION | awk -F. '{print $1"."$2"."$3+1}')
            VERSION_PREFIX=${VERSION_PREFIX:-beta}
            RELEASE_VERSION="${BASE_VERSION}-${VERSION_PREFIX}-${GIT_COMMIT_HASH}"
          else
            INPUT_VERSION="${{ github.event.inputs.version }}"
            CLEAN_VERSION=$(echo "$INPUT_VERSION" | sed 's/^v//')
            if [[ ! "$CLEAN_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Invalid version format: $INPUT_VERSION"
              exit 1
            fi
            RELEASE_VERSION="$CLEAN_VERSION"
          fi

          jq --arg version "$RELEASE_VERSION" '.version = $version' package.json > tmp.json && mv tmp.json package.json

      - name: Keep product name lowercase on Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          sed -i "s/productName: Sparkle/productName: sparkle/" electron-builder.yml

      - name: Install Build Tools
        if: matrix.os == 'ubuntu-latest' && matrix.format == 'pacman'
        run: |
          sudo apt-get update && sudo apt-get install -y libarchive-tools

      - name: Adaptation to the loongarch64 architecture
        env:
          npm_config_arch: ${{ matrix.arch }}
          npm_config_target_arch: ${{ matrix.arch }}
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'loong64'
        shell: bash
        run: |
          export ELECTRON_MIRROR="https://github.com/darkyzhou/electron-loong64/releases/download/"
          export electron_use_remote_checksums=1
          SKIP_PREPARE=1 pnpm install electron@37.2.5 -D
          pnpm remove electron-builder
          SKIP_PREPARE=1 pnpm install @loongdotjs/electron-builder@26.0.12 -D

      - name: Install Dependencies and Prepare
        env:
          npm_config_arch: ${{ matrix.arch }}
          npm_config_target_arch: ${{ matrix.arch }}
        shell: bash
        run: |
          SKIP_PREPARE=1 pnpm install
          pnpm prepare --${{ matrix.arch }}

      - name: Build
        env:
          npm_config_arch: ${{ matrix.arch }}
          npm_config_target_arch: ${{ matrix.arch }}
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            pnpm build:win ${{ matrix.format }} --${{ matrix.arch }}
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            if [[ "${{ matrix.arch }}" == "loong64" ]]; then
              export ELECTRON_MIRROR="https://github.com/darkyzhou/electron-loong64/releases/download/"
              export electron_use_remote_checksums=1
              pnpm build:linux ${{ matrix.format }} --${{ matrix.arch }}
            else
              pnpm build:linux ${{ matrix.format }} --${{ matrix.arch }}
            fi
          else
            pnpm build:mac --${{ matrix.arch }}
          fi

      - name: Add Portable Flag
        if: matrix.os == 'windows-latest' && matrix.format == '7z'
        shell: pwsh
        run: |
          New-Item -Path "PORTABLE" -ItemType File
          Get-ChildItem dist/*portable.7z | ForEach-Object {
            7z a $_.FullName PORTABLE
          }
      
      - name: Magic build for AOSC OS(loongarch64)
        if: matrix.os == 'ubuntu-latest' && matrix.format == 'deb' && matrix.arch == 'loong64'
        shell: bash
        run: |
          set -e
          VERSION=$(jq -r '.version' package.json)
          mkdir workdir
          dpkg-deb -R dist/sparkle-linux-${VERSION}-loong64.deb workdir
          sed -i 's/^Architecture: .*/Architecture: loongarch64/' workdir/DEBIAN/control
          dpkg-deb -b workdir dist/sparkle-linux-${VERSION}-loongarch64.deb
          rm -rf workdir

      ## Waiting for loogdotjs@electron-builder fix it
      - name: Make sure rpm show correct loongarch64 architecture name 
        if: matrix.os == 'ubuntu-latest' && matrix.format == 'rpm' && matrix.arch == 'loong64'
        shell: bash
        run: |
          set -e
          VERSION=$(jq -r '.version' package.json)
          mv dist/sparkle-linux-${VERSION}-loong64.rpm dist/sparkle-linux-${VERSION}-loongarch64.rpm
          
      - name: Create Changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git log -1 --pretty=format:"%s%n%b" > changelog.md

      - name: Generate latest.yml
        shell: bash
        run: SKIP_CHANGELOG=1 pnpm updater

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}${{ matrix.format && '-' || '' }}${{ matrix.format || '' }}
          path: |
            dist/sparkle*
            !dist/sparkle.app.plist
            !dist/sparkle*blockmap*
            latest.yml
            changelog.md

  pre-release:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: bin/
          merge-multiple: true

      - name: Delete current release assets
        uses: 8Mi-Tech/delete-release-assets-action@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: pre-release
          deleteOnlyFromDrafts: false

      - name: Tag Repo
        uses: richardsimko/update-tag@v1
        with:
          tag_name: pre-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Prerelease
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: pre-release
          body_path: bin/changelog.md
          files: |
            bin/latest.yml
            bin/dist/*
          prerelease: true

  release:
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.version != '')
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'
          fetch-tags: 'true'

      - name: Generate Changelog
        env:
          API_URL: ${{ secrets.API_URL }}
          API_KEY: ${{ secrets.API_KEY }}
        run: |
          TEXT=$(git log $(jq -r .version package.json)..HEAD --pretty=format:%s | grep -v '[0-9]\+\.[0-9]\+\.[0-9]\+$' | sed ':a;N;$!ba;s/\n/\\n/g')
          QUESTION="Translate into Chinese:\n"""\n$TEXT\n""""
          PAYLOAD=$(cat <<EOF
          {
            "stream": false,
            "model": "gpt-5-mini",
            "messages": [
              {
                "role": "system",
                "content": "You are a professional translation engine, please translate the text into a colloquial, professional, elegant and fluent content, without the style of machine translation. You must only translate the text content, never interpret it."
              },
              {
                "role": "user",
                "content": "$QUESTION"
              }
            ]
          }
          EOF
          )
          RESPONSE=$(curl -s -X POST "$API_URL/v1/chat/completions" \
            -H "Authorization: Bearer $API_KEY" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            --max-time 30)
          echo '# 更新日志' > changelog.md
          echo $RESPONSE | jq .choices[0].message.content -r | sed 's/\\n/\n/g' | sed 's/^/ - /g' >> changelog.md

      - name: Update Version
        run: |
          INPUT_VERSION="${{ github.event.inputs.version }}"
          CLEAN_VERSION=$(echo "$INPUT_VERSION" | sed 's/^v//')
          if [[ ! "$CLEAN_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format: $INPUT_VERSION"
            exit 1
          fi
          jq --arg version "$CLEAN_VERSION" '.version = $version' package.json > tmp.json && mv tmp.json package.json

          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add package.json
          git commit -m "update version to $CLEAN_VERSION"
          git push

      - name: Install Dependencies and Updater
        run: |
          npm install -g pnpm
          SKIP_PREPARE=1 pnpm install
          pnpm updater

      - uses: actions/download-artifact@v4
        with:
          path: bin/
          merge-multiple: true

      - name: Delete Current
        uses: 8Mi-Tech/delete-release-assets-action@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.event.inputs.version != '' && github.event.inputs.version || github.ref }}
          deleteOnlyFromDrafts: false

      - name: Publish Release
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.version != '' && github.event.inputs.version || github.ref }}
          body_path: changelog.md
          files: |
            latest.yml
            bin/dist/*
